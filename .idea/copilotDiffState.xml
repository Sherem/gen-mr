<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/common.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/common.js" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="// common.js&#10;// Handles prompt generation, config/token management, and OpenAI API integration&#10;&#10;import fs from 'fs';&#10;import path from 'path';&#10;import axios from 'axios';&#10;import os from 'os';&#10;&#10;export function getConfig() {&#10;    const localPath = path.resolve(process.cwd(), '.gen-mr/config.json');&#10;    const homePath = path.resolve(os.homedir(), '.gen-mr/config.json');&#10;    if (fs.existsSync(localPath)) {&#10;        return JSON.parse(fs.readFileSync(localPath));&#10;    } else if (fs.existsSync(homePath)) {&#10;        return JSON.parse(fs.readFileSync(homePath));&#10;    } else {&#10;        throw new Error('No config found in .gen-mr directory');&#10;    }&#10;}&#10;&#10;export async function generatePrompt(openaiToken, sourceBranch, targetBranch, jiraTickets) {&#10;    const prompt = `Generate a merge/pull request name and extensive description for merging '${sourceBranch}' into '${targetBranch}'. Include JIRA tickets: ${jiraTickets || 'none'}.`;&#10;    const response = await axios.post('https://api.openai.com/v1/chat/completions', {&#10;        model: 'gpt-3.5-turbo',&#10;        messages: [{ role: 'user', content: prompt }],&#10;        max_tokens: 512&#10;    }, {&#10;        headers: {&#10;            'Authorization': `Bearer ${openaiToken}`,&#10;            'Content-Type': 'application/json'&#10;        }&#10;    });&#10;    return response.data.choices[0].message.content;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gen-mr.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gen-mr.js" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="#!/usr/bin/env node&#10;// gen-mr.js&#10;// CLI tool for creating GitLab merge requests with AI-generated name/description&#10;&#10;import axios from 'axios';&#10;import minimist from 'minimist';&#10;import readline from 'readline';&#10;import { getConfig, generatePrompt } from './common.mjs';&#10;const argv = minimist(process.argv.slice(2));&#10;&#10;async function main() {&#10;    // Check for required arguments&#10;    const sourceBranch = argv.source;&#10;    const targetBranch = argv.target;&#10;    const jiraTickets = argv.jira || '';&#10;    if (!sourceBranch || !targetBranch) {&#10;        console.log('Usage: gen-mr --source &lt;sourceBranch&gt; --target &lt;targetBranch&gt; [--jira &lt;JIRA-123,JIRA-456&gt;]');&#10;        process.exit(1);&#10;    }&#10;&#10;    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });&#10;    const config = getConfig();&#10;    const { gitlabToken, openaiToken, gitlabUrl } = config;&#10;    const aiResult = await generatePrompt(openaiToken, sourceBranch, targetBranch, jiraTickets);&#10;    const [title, ...descArr] = aiResult.split('\n');&#10;    const description = descArr.join('\n');&#10;    console.log('\nGenerated Title:', title);&#10;    console.log('Generated Description:', description);&#10;    rl.question('Do you want to edit the title/description? (y/N): ', async (edit) =&gt; {&#10;        let finalTitle = title;&#10;        let finalDescription = description;&#10;        if (edit.toLowerCase() === 'y') {&#10;            finalTitle = await new Promise(res =&gt; rl.question('New Title: ', res));&#10;            finalDescription = await new Promise(res =&gt; rl.question('New Description: ', res));&#10;        }&#10;        // Create MR via GitLab API&#10;        try {&#10;            const res = await axios.post(`${gitlabUrl}/api/v4/projects/${config.gitlabProjectId}/merge_requests`, {&#10;                source_branch: sourceBranch,&#10;                target_branch: targetBranch,&#10;                title: finalTitle,&#10;                description: finalDescription&#10;            }, {&#10;                headers: { 'PRIVATE-TOKEN': gitlabToken }&#10;            });&#10;            console.log('Merge request created:', res.data.web_url);&#10;        } catch (err) {&#10;            console.error('Failed to create merge request:', err.response?.data || err.message);&#10;        }&#10;        rl.close();&#10;    });&#10;}&#10;&#10;main();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gen-pr.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gen-pr.js" />
              <option name="originalContent" value="#!/usr/bin/env node&#10;// gen-pr.js&#10;// CLI tool for creating GitHub pull requests with AI-generated name/description&#10;&#10;const axios = require('axios');&#10;const { getConfig, generatePrompt } = require('./common');&#10;const argv = require('minimist')(process.argv.slice(2));&#10;&#10;async function main() {&#10;    // Check for required arguments&#10;    const sourceBranch = argv.source;&#10;    const targetBranch = argv.target;&#10;    const jiraTickets = argv.jira || '';&#10;    if (!sourceBranch || !targetBranch) {&#10;        console.log('Usage: gen-pr --source &lt;sourceBranch&gt; --target &lt;targetBranch&gt; [--jira &lt;JIRA-123,JIRA-456&gt;]');&#10;        process.exit(1);&#10;    }&#10;&#10;    const rl = require('readline').createInterface({ input: process.stdin, output: process.stdout });&#10;    const config = getConfig();&#10;    const { githubToken, openaiToken, githubRepo } = config;&#10;    const aiResult = await generatePrompt(openaiToken, sourceBranch, targetBranch, jiraTickets);&#10;    const [title, ...descArr] = aiResult.split('\n');&#10;    const description = descArr.join('\n');&#10;    console.log('\nGenerated Title:', title);&#10;    console.log('Generated Description:', description);&#10;    rl.question('Do you want to edit the title/description? (y/N): ', async (edit) =&gt; {&#10;        let finalTitle = title;&#10;        let finalDescription = description;&#10;        if (edit.toLowerCase() === 'y') {&#10;            finalTitle = await new Promise(res =&gt; rl.question('New Title: ', res));&#10;            finalDescription = await new Promise(res =&gt; rl.question('New Description: ', res));&#10;        }&#10;        // Create PR via GitHub API&#10;        try {&#10;            const res = await axios.post(`https://api.github.com/repos/${githubRepo}/pulls`, {&#10;                head: sourceBranch,&#10;                base: targetBranch,&#10;                title: finalTitle,&#10;                body: finalDescription&#10;            }, {&#10;                headers: { 'Authorization': `token ${githubToken}` }&#10;            });&#10;            console.log('Pull request created:', res.data.html_url);&#10;        } catch (err) {&#10;            console.error('Failed to create pull request:', err.response?.data || err.message);&#10;        }&#10;        rl.close();&#10;    });&#10;}&#10;&#10;main();&#10;" />
              <option name="updatedContent" value="#!/usr/bin/env node&#10;// gen-pr.js&#10;// CLI tool for creating GitHub pull requests with AI-generated name/description&#10;&#10;import axios from 'axios';&#10;import minimist from 'minimist';&#10;import readline from 'readline';&#10;import { getConfig, generatePrompt } from './common.mjs';&#10;const argv = minimist(process.argv.slice(2));&#10;&#10;async function main() {&#10;    // Check for required arguments&#10;    const sourceBranch = argv.source;&#10;    const targetBranch = argv.target;&#10;    const jiraTickets = argv.jira || '';&#10;    if (!sourceBranch || !targetBranch) {&#10;        console.log('Usage: gen-pr --source &lt;sourceBranch&gt; --target &lt;targetBranch&gt; [--jira &lt;JIRA-123,JIRA-456&gt;]');&#10;        process.exit(1);&#10;    }&#10;&#10;    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });&#10;    const config = getConfig();&#10;    const { githubToken, openaiToken, githubRepo } = config;&#10;    const aiResult = await generatePrompt(openaiToken, sourceBranch, targetBranch, jiraTickets);&#10;    const [title, ...descArr] = aiResult.split('\n');&#10;    const description = descArr.join('\n');&#10;    console.log('\nGenerated Title:', title);&#10;    console.log('Generated Description:', description);&#10;    rl.question('Do you want to edit the title/description? (y/N): ', async (edit) =&gt; {&#10;        let finalTitle = title;&#10;        let finalDescription = description;&#10;        if (edit.toLowerCase() === 'y') {&#10;            finalTitle = await new Promise(res =&gt; rl.question('New Title: ', res));&#10;            finalDescription = await new Promise(res =&gt; rl.question('New Description: ', res));&#10;        }&#10;        // Create PR via GitHub API&#10;        try {&#10;            const res = await axios.post(`https://api.github.com/repos/${githubRepo}/pulls`, {&#10;                head: sourceBranch,&#10;                base: targetBranch,&#10;                title: finalTitle,&#10;                body: finalDescription&#10;            }, {&#10;                headers: { 'Authorization': `token ${githubToken}` }&#10;            });&#10;            console.log('Pull request created:', res.data.html_url);&#10;        } catch (err) {&#10;            console.error('Failed to create pull request:', err.response?.data || err.message);&#10;        }&#10;        rl.close();&#10;    });&#10;}&#10;&#10;main();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>